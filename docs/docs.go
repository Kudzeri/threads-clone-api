// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/{provider}": {
            "get": {
                "description": "Redirects the user to the chosen OAuth provider's authentication page.",
                "tags": [
                    "Auth"
                ],
                "summary": "OAuth Redirect",
                "parameters": [
                    {
                        "enum": [
                            "google",
                            "vk",
                            "telegram"
                        ],
                        "type": "string",
                        "description": "OAuth provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/{provider}/callback": {
            "get": {
                "description": "Handles the OAuth callback from the specified provider.",
                "tags": [
                    "Auth"
                ],
                "summary": "OAuth Callback",
                "parameters": [
                    {
                        "enum": [
                            "google",
                            "vk",
                            "telegram"
                        ],
                        "type": "string",
                        "description": "OAuth provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization code (used for Google and VK)",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram user id (for Telegram)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram auth date (for Telegram)",
                        "name": "auth_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram hash (for Telegram)",
                        "name": "hash",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram first name (optional)",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram last name (optional)",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram username (optional)",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Telegram photo URL (optional)",
                        "name": "photo_url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TokenResponse",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token response",
                        "schema": {
                            "$ref": "#/definitions/handler.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid credentials or request",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token response",
                        "schema": {
                            "$ref": "#/definitions/handler.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or error during registration",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handler.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handler.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "jwt_token_placeholder"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Threads Clone API",
	Description:      "API для пет проекта.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
